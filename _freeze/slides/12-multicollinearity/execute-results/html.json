{
  "hash": "4a7279d503ae78e12f022d068a9e7abe",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Multicollinearity\"\nauthor: \"Prof. Eric Friedlander\"\nfooter: \"[ðŸ”— MAT 212 - Winter 2025 -  Schedule](https://mat212wi25.netlify.app/schedule)\"\nlogo: \"../images/logo.png\"\nformat: \n  revealjs:\n    theme: slides.scss\n    multiplex: false\n    transition: fade\n    slide-number: false\n    incremental: false \n    chalkboard: true\nhtml-math-method:\n  method: mathjax\n  url: \"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\"\nexecute:\n  freeze: auto\n  echo: true\n  cache: false\nknitr:\n  opts_chunk: \n    R.options:      \n    width: 200\nbibliography: references.bib  \n---\n\n\n\n\n\n## First things first\n\n-   Finish-up AE-16\n\n## Announcements\n\n-   Project: EDA Due Today\n-   Project: [Paper Due November 18th](https://mat212fa24.netlify.app/project-instructions#draft-report)\n-   Oral R Quiz\n\n::: appex\nðŸ“‹ [AE 17 - Multicollinearity](https://mat212fa24.netlify.app/ae/ae-17-multicollinearity)\n\n- Open up AE 17 and Complete Exercise 0\n:::\n\n## Topics\n\n::: nonincremental\n-   Defining Multicollinearity\n-   Detecting Multicollinearity\n-   Variance Inflation Factors\n:::\n\n## Computational setup\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# load packages\nlibrary(tidyverse)\nlibrary(broom)\nlibrary(mosaic)\nlibrary(mosaicData)\nlibrary(patchwork)\nlibrary(knitr)\nlibrary(kableExtra)\nlibrary(scales)\nlibrary(countdown)\nlibrary(rms)\n\n# set default theme and larger font size for ggplot2\nggplot2::theme_set(ggplot2::theme_minimal(base_size = 16))\n```\n:::\n\n\n\n\n## Data: `rail_trail` {.smaller}\n\n::: nonincremental\n-   The Pioneer Valley Planning Commission (PVPC) collected data for ninety days from April 5, 2005 to November 15, 2005.\n-   Data collectors set up a laser sensor, with breaks in the laser beam recording when a rail-trail user passed the data collection station.\n:::\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 90 Ã— 7\n   volume hightemp avgtemp season cloudcover precip day_type\n    <dbl>    <dbl>   <dbl> <chr>       <dbl>  <dbl> <chr>   \n 1    501       83    66.5 Summer       7.60 0      Weekday \n 2    419       73    61   Summer       6.30 0.290  Weekday \n 3    397       74    63   Spring       7.5  0.320  Weekday \n 4    385       95    78   Summer       2.60 0      Weekend \n 5    200       44    48   Spring      10    0.140  Weekday \n 6    375       69    61.5 Spring       6.60 0.0200 Weekday \n 7    417       66    52.5 Spring       2.40 0      Weekday \n 8    629       66    52   Spring       0    0      Weekend \n 9    533       80    67.5 Summer       3.80 0      Weekend \n10    547       79    62   Summer       4.10 0      Weekday \n# â„¹ 80 more rows\n```\n\n\n:::\n:::\n\n\n\n\nSource: [Pioneer Valley Planning Commission](http://www.fvgreenway.org/pdfs/Northampton-Bikepath-Volume-Counts%20_05_LTA.pdf) via the **mosaicData** package.\n\n## Full model\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n\n\n|term            |   estimate| std.error|  statistic|   p.value|\n|:---------------|----------:|---------:|----------:|---------:|\n|(Intercept)     |  17.622161| 76.582860|  0.2301058| 0.8185826|\n|hightemp        |   7.070528|  2.420523|  2.9210743| 0.0045045|\n|avgtemp         |  -2.036685|  3.142113| -0.6481896| 0.5186733|\n|seasonSpring    |  35.914983| 32.992762|  1.0885716| 0.2795319|\n|seasonSummer    |  24.153571| 52.810486|  0.4573632| 0.6486195|\n|cloudcover      |  -7.251776|  3.843071| -1.8869743| 0.0627025|\n|precip          | -95.696525| 42.573359| -2.2478030| 0.0272735|\n|day_typeWeekend |  35.903750| 22.429056|  1.6007696| 0.1132738|\n\n\n:::\n:::\n\n\n\n# Multicollinearity\n\n## What is multicollinearity\n\n-   **Multicollinearity** is the case when one or more predictor variables are strongly correlated with some combination of other predictors\n-   **Intuition:** if you could fit a good linear model with one of your predictors as the response and the rest of the predictors as your explanatory variables, then your predictors are exhibiting multicollinearity\n\n\n\n## Example\n\nLet's assume the true population regression equation is $y = 3 + 4x$\n\n. . .\n\nSuppose we try estimating that equation using a model with variables $x$ and $z = x/10$\n\n$$\n\\begin{aligned}\\hat{y}&= \\hat{\\beta}_0 + \\hat{\\beta}_1x  + \\hat{\\beta}_2z\\\\\n&= \\hat{\\beta}_0 + \\hat{\\beta}_1x  + \\hat{\\beta}_2\\frac{x}{10}\\\\\n&= \\hat{\\beta}_0 + \\bigg(\\hat{\\beta}_1 + \\frac{\\hat{\\beta}_2}{10}\\bigg)x\n\\end{aligned}\n$$\n\n## Example {.smaller}\n\n$$\\hat{y} = \\hat{\\beta}_0 + \\bigg(\\hat{\\beta}_1 + \\frac{\\hat{\\beta}_2}{10}\\bigg)x$$\n\n-   We can set $\\hat{\\beta}_1$ and $\\hat{\\beta}_2$ to any two numbers such that $\\hat{\\beta}_1 + \\frac{\\hat{\\beta}_2}{10} = 4$\n\n-   Therefore, we are unable to choose the \"best\" combination of $\\hat{\\beta}_1$ and $\\hat{\\beta}_2$\n\n-   In statistics, we say this model is \"unidentifiable\" because different parameters combinations can result in the same model\n\n-   This is also why we need to set a reference level for categorical variables\n\n-   Complete Exercises 1-2.\n\n## Why multicollinearity is a problem\n\n-   When we have perfect collinearities, we are unable to get estimates for the coefficients\n\n    -   When we have almost perfect collinearities (i.e. highly correlated predictor variables), the standard errors for our regression coefficients inflate\n\n    -   In other words, we lose precision in our estimates of the regression coefficients\n\n    -   This impedes our ability to use the model for inference\n\n    -   It is also difficult to interpret the model coefficients\n\n## Detecting Multicollinearity {.midi}\n\nMulticollinearity may occur when...\n\n-   There are very high correlations $(r > 0.9)$ among two or more predictor variables, especially when the sample size is small\n\n-   One (or more) predictor variables is an almost perfect linear combination of the others\n\n-   There are interactions between two or more continuous variables\n\n\n## Detecting multicollinearity in the EDA\n\n-   Look at a correlation matrix of the predictor variables, including all indicator variables\n    -   Look out for values close to 1 or -1\n-   Look at a scatter plot matrix of the predictor variables\n    -   Look out for plots that show a relatively linear relationship\n-   Complete Exercises 3-4.\n\n## Detecting Multicollinearity (VIF)\n\n**Variance Inflation Factor (VIF)**: Measure of multicollinearity in the regression model\n\n$$VIF(\\hat{\\beta}_j) = \\frac{1}{1-R^2_{X_j|X_{-j}}}$$\n\nwhere $R^2_{X_j|X_{-j}}$ is the proportion of variation in $X_j$ that is explained by the linear combination of the other explanatory variables in the model.\n\n## Detecting Multicollinearity (VIF)\n\n-   Typically $VIF > 10$ indicates concerning multicollinearity\n\n-   Variables with similar values of VIF are typically the ones correlated with each other\n\n-   Use the `vif()` function in the **rms** R package to calculate VIF\n\n## VIF for rail trail model\n\nComplete Exercise 5.\n\n. . .\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nvif(rt_full_fit)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       hightemp         avgtemp    seasonSpring    seasonSummer      cloudcover \n      10.259978       13.086175        2.751577        5.841985        1.587485 \n         precip day_typeWeekend \n       1.295352        1.125741 \n```\n\n\n:::\n:::\n\n\n\n<br>\n\n. . .\n\n`hightemp` and `avgtemp` are correlated. \n\n## What to do about Multicollinearity\n\n1. Drop some predictors.\n    - Example: Remove <u>**one**</u> of these variables and refit the model.\n2. Combine some predictors.\n    - Example: Create a new variable `temp_comsite` that is the average of `avgtemp` and `hightemp`.\n3. Discount the individual coefficients and t-tests.\n    - Example: Think about `avgtemp` and `hightemp` together with their individual $\\beta$'s and p-values not having much meaning.\n    \n. . .\n\nComplete Exercises 6 & 7.\n\n## Model without `hightemp` {.smaller}\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n\n\n|term            | estimate| std.error| statistic| p.value|\n|:---------------|--------:|---------:|---------:|-------:|\n|(Intercept)     |   76.071|    77.204|     0.985|   0.327|\n|avgtemp         |    6.003|     1.583|     3.792|   0.000|\n|seasonSpring    |   34.555|    34.454|     1.003|   0.319|\n|seasonSummer    |   13.531|    55.024|     0.246|   0.806|\n|cloudcover      |  -12.807|     3.488|    -3.672|   0.000|\n|precip          | -110.736|    44.137|    -2.509|   0.014|\n|day_typeWeekend |   48.420|    22.993|     2.106|   0.038|\n\n\n:::\n:::\n\n\n\n## Model without `avgtemp` {.smaller}\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n\n\n|term            | estimate| std.error| statistic| p.value|\n|:---------------|--------:|---------:|---------:|-------:|\n|(Intercept)     |    8.421|    74.992|     0.112|   0.911|\n|hightemp        |    5.696|     1.164|     4.895|   0.000|\n|seasonSpring    |   31.239|    32.082|     0.974|   0.333|\n|seasonSummer    |    9.424|    47.504|     0.198|   0.843|\n|cloudcover      |   -8.353|     3.435|    -2.431|   0.017|\n|precip          |  -98.904|    42.137|    -2.347|   0.021|\n|day_typeWeekend |   37.062|    22.280|     1.663|   0.100|\n\n\n:::\n:::\n\n\n\n## Model without `temp_composite` {.smaller}\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n\n\n|term            | estimate| std.error| statistic| p.value|\n|:---------------|--------:|---------:|---------:|-------:|\n|(Intercept)     |   18.823|    77.430|     0.243|   0.809|\n|seasonSpring    |   28.458|    33.059|     0.861|   0.392|\n|seasonSummer    |   -0.986|    51.234|    -0.019|   0.985|\n|cloudcover      |  -10.367|     3.409|    -3.041|   0.003|\n|precip          | -104.475|    42.725|    -2.445|   0.017|\n|day_typeWeekend |   40.914|    22.479|     1.820|   0.072|\n|temp_composite  |    6.292|     1.376|     4.571|   0.000|\n\n\n:::\n:::\n\n\n\n## Choosing a model {.midi}\n\nModel without `hightemp`:\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n\n\n| adj.r.squared|    AIC|    BIC|\n|-------------:|------:|------:|\n|          0.42| 1087.5| 1107.5|\n\n\n:::\n:::\n\n\n\nModel without `avgtemp`:\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n\n\n| adj.r.squared|     AIC|     BIC|\n|-------------:|-------:|-------:|\n|          0.47| 1079.05| 1099.05|\n\n\n:::\n:::\n\n\n\nModel with `temp_composite`:\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n\n\n| adj.r.squared|     AIC|     BIC|\n|-------------:|-------:|-------:|\n|          0.46| 1081.67| 1101.67|\n\n\n:::\n:::\n\n\n\n\n. . .\n\nBased on Adjusted $R^2$, AIC, and BIC, the model without **avgtemp** is a better fit. Therefore, we choose to remove **avgtemp** from the model and leave **hightemp** in the model to deal with the multicollinearity.\n\n## Selected model (for now)\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n\n\n|term            | estimate| std.error| statistic| p.value|\n|:---------------|--------:|---------:|---------:|-------:|\n|(Intercept)     |    8.421|    74.992|     0.112|   0.911|\n|hightemp        |    5.696|     1.164|     4.895|   0.000|\n|seasonSpring    |   31.239|    32.082|     0.974|   0.333|\n|seasonSummer    |    9.424|    47.504|     0.198|   0.843|\n|cloudcover      |   -8.353|     3.435|    -2.431|   0.017|\n|precip          |  -98.904|    42.137|    -2.347|   0.021|\n|day_typeWeekend |   37.062|    22.280|     1.663|   0.100|\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}